// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   String                 @id @default(uuid())
  role                 Role                   @default(TRAINEE)
  email                String                 @unique
  password             String
  firstName            String
  lastName             String
  imgUrl               String?
  coachProfile         CoachProfile?
  traineeProfile       TraineeProfile?
  createdPrograms      Program[]
  joinedPrograms       UserPrograms[]
  createdExercises     Exercise[]
  createdWorkouts      Workout[]
  userProgress         UserProgress[]
  userToProgramReviews ProgramPackageReview[]
  coachPackages        CoachPackage[]
  userSubscriptions    Subscriptions[]        @relation("userSubscriptions")
  packageCoach         Subscriptions?         @relation("packageCoach")
  coachReviews         CoachReviews[]         @relation("reviewedCoach")
  userToCoachReviews   CoachReviews[]         @relation("reviewer")

}

model CoachProfile {
  accountId String  @id
  account   Account @relation(fields: [accountId], references: [id])
  bio       String
}

model TraineeProfile {
  accountId String  @id
  account   Account @relation(fields: [accountId], references: [id])
  gender    Gender
  age       Int
  weight    Int
  height    Int
  goal      Goal
}

model Program {
  id                     String            @id @default(uuid())
  createdBy              Account           @relation(fields: [coachId], references: [id])
  coachId                String            @unique
  workoutsNo             Int
  title                  String
  description            String
  category               Category          @default(Beginner)
  duration               Int
  imgUrl                 String
  createdUserPrograms    UserPrograms[] // this line should return the created special programs
  createdGeneralPrograms ProgramPackage[] // this line should return the created general programs
  includedWorkouts       ProgramWorkouts[]
  UserProgress           UserProgress[]
}

model UserPrograms {
  program        Program  @relation(fields: [programId], references: [id])
  programId      String
  user           Account  @relation(fields: [userId], references: [id])
  userId         String
  enrollmentDate DateTime @default(now())

  @@id([programId, userId])
}

model Exercise {
  id                 String             @id @default(uuid())
  title              String
  description        String
  videoUrl           String
  gifUrl             String
  activeMuscle       ActiveMuscle
  createdBy          Account            @relation(fields: [coachId], references: [id])
  coachId            String             @unique
  includedInWorkouts WorkoutExercises[]
  UserProgress       UserProgress[]
}

model Workout {
  id                 String             @id @default(uuid())
  createdBy          Account            @relation(fields: [coachId], references: [id])
  coachId            String             @unique
  category           Category           @default(Beginner)
  exerciseNo         Int
  exercises          WorkoutExercises[]
  includedInPrograms ProgramWorkouts[]
  UserProgress       UserProgress[]
}

model WorkoutExercises {
  workout    Workout  @relation(fields: [workoutId], references: [id])
  workoutId  String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  order      Int
  reps       Int
  sets       Int


  @@id([workoutId, exerciseId])
}

model ProgramWorkouts {
  program   Program @relation(fields: [programId], references: [id])
  programId String
  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId String


  @@id([programId, workoutId])
}

model UserProgress {
  id              String   @id @default(uuid())
  userId          String
  user            Account  @relation(fields: [userId], references: [id])
  programId       String
  currentProgram  Program  @relation(fields: [programId], references: [id])
  workoutId       String
  currentWorkout  Workout  @relation(fields: [workoutId], references: [id])
  exerciseId      String
  currentExercise Exercise @relation(fields: [exerciseId], references: [id])
  updatedAt       DateTime @default(now())
  dayNo           Int
  exerciseNo      Int
}

model ProgramPackage {
  id             String                 @id @default(uuid())
  programId      String
  program        Program                @relation(fields: [programId], references: [id])
  price          Decimal
  programReviews ProgramPackageReview[]
}

model ProgramPackageReview {
  id               String         @id @default(uuid())
  userId           String
  reviewAuthor     Account        @relation(fields: [userId], references: [id])
  programPackageId String
  programReview    ProgramPackage @relation(fields: [programPackageId], references: [id])
  createdAt        DateTime       @default(now())
  description      String
  rating           Int
}

model CoachPackage {
  id            String          @id @default(uuid())
  coachId       String
  coach         Account         @relation(fields: [coachId], references: [id])
  price         Decimal
  title         String
  description   String
  Subscriptions Subscriptions[]
}

model Subscriptions {
  id                String       @id @default(uuid())
  userId            String
  subscribedUser    Account      @relation("userSubscriptions", fields: [userId], references: [id])
  packageId         String
  subscribedPackage CoachPackage @relation(fields: [packageId], references: [id])
  transactionId     String
  createdAt         DateTime     @default(now())
  coachId           String       @unique
  coach             Account      @relation("packageCoach", fields: [coachId], references: [id])
}

model CoachReviews {
  id          String   @id @default(uuid())
  coachId     String
  coach       Account  @relation("reviewedCoach", fields: [coachId], references: [id])
  userId      String
  user        Account  @relation("reviewer", fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  description String
  rating      Int
}

enum ActiveMuscle {
  Biceps
  Triceps
  Chest
  Shoulders
}

enum Category {
  Beginner
  Intermediate
  Advanced
}

enum Role {
  TRAINEE
  COACH
}

enum Gender {
  FEMALE
  MALE
}

enum Goal {
  LOSS
  FIT
}
