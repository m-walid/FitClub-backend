// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String           @id @default(uuid())
  role                     Role             @default(TRAINEE)
  email                    String           @unique
  password                 String
  firstName                String
  lastName                 String
  imgUrl                   String?
  coachProfile             CoachProfile?
  traineeProfile           TraineeProfile?
  createdPrograms          Program[]
  joinedPrograms           UserPrograms[]
  createdExercises         Exercise[]
  userProgress             UserProgress[]
  userToProgramReviews     PackageReview[]
  packages                 Package[]
  coachReviews             CoachReviews[]   @relation("reviewedCoach")
  userToCoachReviews       CoachReviews[]   @relation("reviewer")
  otp                      Otp?
  isVerified               Boolean          @default(false)
  programsRequested        ProgramRequest[] @relation("requester")
  ProgramsRequestsReceived ProgramRequest[] @relation("requestReceiver")
  bills                    Billing[]
}

model Otp {
  accountId String   @id
  code      String
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model CoachProfile {
  accountId String  @id
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bio       String
}

model TraineeProfile {
  accountId String  @id
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  gender    Gender
  age       Int
  weight    Int
  height    Int
  goal      Goal
}

model Program {
  id           String         @id @default(uuid())
  createdBy    Account        @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId      String
  title        String
  description  String
  category     Category       @default(Beginner)
  duration     Int
  imgUrl       String
  package      Package?
  weeks        ProgramWeek[]
  UserProgress UserProgress[]
  UserPrograms UserPrograms[]
}

model UserPrograms {
  program        Program  @relation(fields: [programId], references: [id])
  programId      String
  user           Account  @relation(fields: [userId], references: [id])
  userId         String
  enrollmentDate DateTime @default(now())

  @@id([programId, userId])
}

model Exercise {
  id             String         @id @default(uuid())
  title          String
  description    String
  videoUrl       String
  imgUrl         String
  activeMuscle   ActiveMuscle
  createdBy      Account        @relation(fields: [coachId], references: [id])
  coachId        String
  includedInDays DayExercise[]
  userProgress   UserProgress[]
}

model ProgramWeek {
  id        String       @id @default(uuid())
  Program   Program      @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  order     Int
  days      ProgramDay[]

  @@unique([programId, order])
}

model ProgramDay {
  id        String        @id @default(uuid())
  exercises DayExercise[]
  week      ProgramWeek   @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId    String
  order     Int

  @@unique([weekId, order])
}

model DayExercise {
  day        ProgramDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId      String
  exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  order      Int
  reps       Int?
  sets       Int?
  duration   Int?

  @@id([dayId, exerciseId])
  @@unique([dayId, order])
}

model UserProgress {
  id              String   @id @default(uuid())
  userId          String
  user            Account  @relation(fields: [userId], references: [id])
  programId       String
  currentProgram  Program  @relation(fields: [programId], references: [id])
  exerciseId      String
  currentExercise Exercise @relation(fields: [exerciseId], references: [id])
  updatedAt       DateTime @default(now())
  dayNo           Int
  exerciseNo      Int
}

model Package {
  id              String           @id @default(uuid())
  title           String
  description     String
  type            PackageType      @default(General)
  programId       String?          @unique
  program         Program?         @relation(fields: [programId], references: [id], onDelete: Cascade)
  price           Decimal
  packageReviews  PackageReview[]
  coach           Account          @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId         String
  programRequests ProgramRequest[]
  bills           Billing[]
}

model ProgramRequest {
  id        String               @id @default(uuid())
  traineeId String
  trainee   Account              @relation("requester", fields: [traineeId], references: [id], onDelete: Cascade)
  coachId   String
  coach     Account              @relation("requestReceiver", fields: [coachId], references: [id], onDelete: Cascade)
  createdAt DateTime             @default(now())
  packageId String
  package   Package              @relation(fields: [packageId], references: [id])
  status    ProgramRequestStatus @default(Pending)

}

model PackageReview {
  id           String   @id @default(uuid())
  userId       String
  reviewAuthor Account  @relation(fields: [userId], references: [id])
  packageId    String
  package      Package  @relation(fields: [packageId], references: [id])
  createdAt    DateTime @default(now())
  description  String
  rating       Int

  @@unique([userId, packageId])
}

model CoachReviews {
  id          String   @id @default(uuid())
  coachId     String
  coach       Account  @relation("reviewedCoach", fields: [coachId], references: [id])
  userId      String
  user        Account  @relation("reviewer", fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  description String
  rating      Int

  @@unique([userId, coachId])
}

model Billing {
  id        String   @id @default(uuid())
  packageId String
  package   Package  @relation(fields: [packageId], references: [id])
  traineeId String
  trainee   Account  @relation(fields: [traineeId], references: [id])
  createdAt DateTime @default(now())
}

enum ActiveMuscle {
  Biceps
  Triceps
  Chest
  Shoulders
}

enum Category {
  Beginner
  Intermediate
  Advanced
}

enum Role {
  TRAINEE
  COACH
}

enum Gender {
  FEMALE
  MALE
}

enum Goal {
  WeightLoss
  StayFit
  GainMuscles
  GetStronger
}

enum PackageType {
  General
  Custom
}

enum ProgramRequestStatus {
  Pending
  Preparing
  Done
  Cancelled
}
